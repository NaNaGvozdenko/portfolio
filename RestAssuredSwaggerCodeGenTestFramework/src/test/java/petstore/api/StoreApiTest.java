/*
 * Swagger Petstore
 * This is a sample server Petstore server.  You can find out more about Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).  For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package petstore.api;

import org.junit.jupiter.api.Assertions;
import petstore.JSON;
import petstore.model.ModelApiResponse;
import petstore.model.Order;
import petstore.ApiClient;
import petstore.api.StoreApi;
import io.restassured.builder.RequestSpecBuilder;
import io.restassured.filter.log.ErrorLoggingFilter;
import org.junit.Before;
import org.junit.Test;
import org.junit.Ignore;

import java.time.OffsetDateTime;
import java.util.*;

import static io.restassured.config.ObjectMapperConfig.objectMapperConfig;
import static io.restassured.config.RestAssuredConfig.config;
import static petstore.GsonObjectMapper.gson;

/**
 * API tests for StoreApi
 */
//@Ignore
public class StoreApiTest {

    private StoreApi api;

    @Before
    public void createApi() {
        api = ApiClient.api(ApiClient.Config.apiConfig().reqSpecSupplier(
                () -> new RequestSpecBuilder().setConfig(config().objectMapperConfig(objectMapperConfig().defaultObjectMapper(gson())))
                        .addFilter(new ErrorLoggingFilter())
                        .setBaseUri("https://petstore.swagger.io/v2"))).store();
    }

    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee405AfterDeleteOrder() {
        Assertions.assertEquals(405,
        api.deleteOrder()
                .orderIdPath("").execute(r -> r.prettyPeek()).statusCode());
    }

    /**
     * Order not found
     */
    @Test
    public void shouldSee404AfterDeleteOrder() {
        Long orderId = new Random().nextLong();
        Assertions.assertEquals(404,
        api.deleteOrder()
                .orderIdPath(orderId).execute(r -> r.prettyPeek()).statusCode());
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterDeleteOrder() {
        // Создаем заказ
        Order order = new Order();
        order.id(new Long(123))
                .petId(new Random().nextLong())
                .quantity(1)
                .shipDate(OffsetDateTime.now())
                .status(Order.StatusEnum.APPROVED)
                .complete(false);
        // запрос placeOrder
        api.placeOrder().body(order).execute(r -> r.body());
        // запрос на удаление
        ModelApiResponse modelApiResponse = api.deleteOrder()
                .orderIdPath(order.getId()).execute(r -> r.prettyPeek()).as(ModelApiResponse.class);
        Assertions.assertEquals(200, modelApiResponse.getCode());
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterGetOrderById() {
        // Заполняем ин-фо по заказу
        Order expectedOrder =  new Order()
                .id(new Long(123))
                .petId(new Long(456))
                .quantity(1)
                .shipDate(OffsetDateTime.now())
                .status(Order.StatusEnum.APPROVED)
                .complete(false);
        // Создаем заказ
        api.placeOrder().body(expectedOrder).execute(r -> r.body()).as(Order.class);
        // Ощем заказ по ИД
        Order actualOrder = api.getOrderById().orderIdPath(expectedOrder.getId()).execute(r -> r.prettyPeek()).as(Order.class);
        Assertions.assertEquals(expectedOrder.getId(), actualOrder.getId());
    }

    /**
     * Invalid ID supplied
     */
    @Test
    public void shouldSee405AfterGetOrderById() {
        Assertions.assertEquals(405,
        api.getOrderById()
                .orderIdPath("").execute(r -> r.prettyPeek()).statusCode());
    }

    /**
     * Order not found
     */
    @Test
    public void shouldSee404AfterGetOrderById() {
        Long orderId = new Random().nextLong();
        Assertions.assertEquals(404,
        api.getOrderById()
                .orderIdPath(orderId).execute(r -> r.prettyPeek()).statusCode());
    }


    /**
     * successful operation
     */
    @Test
    public void shouldSee200AfterPlaceOrder() {
        Order order = new Order();
        order.id(new Random().nextLong())
                .petId(new Random().nextLong())
                .quantity(1)
                .shipDate(OffsetDateTime.now())
                .status(Order.StatusEnum.APPROVED)
                .complete(false);
        Assertions.assertEquals(200,
        api.placeOrder()
                .body(order).execute(r -> r.prettyPeek()).statusCode());
    }
}